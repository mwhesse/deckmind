name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

jobs:
  test:
    runs-on: ubuntu-latest

    strategy:
      matrix:
        node-version: [18.x, 20.x]

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Node.js ${{ matrix.node-version }}
      uses: actions/setup-node@v4
      with:
        node-version: ${{ matrix.node-version }}
        cache: 'npm'

    - name: Install server dependencies
      run: |
        cd server
        npm ci

    - name: Install client dependencies
      run: |
        cd client
        npm ci

    - name: Run server tests
      run: |
        cd server
        npm test -- --coverage --watchAll=false

    - name: Run client tests
      run: |
        cd client
        npm test -- --coverage --watchAll=false --passWithNoTests

    - name: Build client
      run: |
        cd client
        npm run build

    - name: Upload coverage reports
      uses: codecov/codecov-action@v3
      with:
        directory: ./coverage
        flags: unittests
        name: codecov-umbrella
        fail_ci_if_error: false

  lint:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'

    - name: Install server dependencies
      run: |
        cd server
        npm ci

    - name: Install client dependencies
      run: |
        cd client
        npm ci

    - name: Run ESLint on server
      run: |
        cd server
        npm run lint

    - name: Run ESLint on client
      run: |
        cd client
        npm run lint

  docker:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Build agent Docker image
      uses: docker/build-push-action@v5
      with:
        context: ./agent
        push: false
        tags: deckmind/agent:latest
        cache-from: type=gha
        cache-to: type=gha,mode=max

    - name: Build server Docker image
      uses: docker/build-push-action@v5
      with:
        context: .
        file: ./Dockerfile
        push: false
        tags: deckmind/server:latest
        cache-from: type=gha
        cache-to: type=gha,mode=max

  security:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'

    - name: Install server dependencies
      run: |
        cd server
        npm ci

    - name: Run security audit
      run: |
        cd server
        npm audit --audit-level moderate

    - name: Run Snyk to check for vulnerabilities
      uses: snyk/actions/node@master
      continue-on-error: true
      env:
        SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
      with:
        args: --file=server/package.json

  release:
    needs: [test, lint, docker, security]
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'

    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'

    - name: Install dependencies
      run: |
        cd server
        npm ci

    - name: Build client
      run: |
        cd client
        npm ci
        npm run build

    - name: Create release
      uses: actions/create-release@v1
      if: github.ref == 'refs/heads/main'
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: v${{ github.run_number }}
        release_name: Release v${{ github.run_number }}
        body: |
          ## Changes in this release
          - Automated release from CI/CD pipeline
          - All tests passed
          - Security audit completed
        draft: false
        prerelease: false